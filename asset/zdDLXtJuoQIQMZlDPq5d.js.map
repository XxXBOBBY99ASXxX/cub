{"version":3,"file":"zdDLXtJuoQIQMZlDPq5d.js","sources":["../../src/stores/AppStore.ts"],"sourcesContent":["import type { APIUser, Snowflake } from \"@spacebarchat/spacebar-api-types/v9\";\nimport { action, computed, makeAutoObservable, observable } from \"mobx\";\nimport secureLocalStorage from \"react-secure-storage\";\nimport { modalController } from \"../controllers/modals\";\nimport Logger from \"../utils/Logger\";\nimport REST from \"../utils/REST\";\nimport { isTauri } from \"../utils/Utils\";\nimport AccountStore from \"./AccountStore\";\nimport ChannelStore from \"./ChannelStore\";\nimport ExperimentsStore from \"./ExperimentsStore\";\nimport GatewayConnectionStore from \"./GatewayConnectionStore\";\nimport GuildStore from \"./GuildStore\";\nimport MessageQueue from \"./MessageQueue\";\nimport PresenceStore from \"./PresenceStore\";\nimport PrivateChannelStore from \"./PrivateChannelStore\";\nimport RoleStore from \"./RoleStore\";\nimport ThemeStore from \"./ThemeStore\";\nimport UpdaterStore from \"./UpdaterStore\";\nimport UserStore from \"./UserStore\";\nimport Channel from \"./objects/Channel\";\nimport Guild from \"./objects/Guild\";\n\n// dev thing to force toggle branding on auth pages for testing.\nexport const AUTH_NO_BRANDING = false;\n\nexport default class AppStore {\n\tprivate readonly logger: Logger = new Logger(\"AppStore\");\n\n\t// whether the gateway is ready\n\t@observable isGatewayReady = false;\n\t// whether the app is still loading\n\t@observable isAppLoading = true;\n\n\t@observable tokenLoaded = false;\n\t@observable token: string | null = null;\n\t@observable fpsShown: boolean = process.env.NODE_ENV === \"development\";\n\n\t// stores\n\t@observable theme: ThemeStore = new ThemeStore();\n\t@observable account: AccountStore | null = null;\n\t@observable gateway = new GatewayConnectionStore(this);\n\t@observable guilds = new GuildStore(this);\n\t@observable roles = new RoleStore(this);\n\t@observable channels = new ChannelStore(this);\n\t@observable users = new UserStore(this);\n\t@observable privateChannels = new PrivateChannelStore(this);\n\t@observable rest = new REST(this);\n\t@observable experiments = new ExperimentsStore();\n\t@observable presences = new PresenceStore(this);\n\t@observable queue = new MessageQueue(this);\n\t@observable updaterStore: UpdaterStore | null = null;\n\n\t@observable activeGuild: Guild | null = null;\n\t@observable activeGuildId: Snowflake | undefined | \"@me\" = \"@me\";\n\t@observable activeChannel: Channel | null = null;\n\t@observable activeChannelId: string | undefined = undefined;\n\t@observable memberListVisible: boolean = true;\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\n\t\tif (isTauri) {\n\t\t\tthis.updaterStore = new UpdaterStore(this);\n\t\t}\n\n\t\t// bind this in toggleMemberList\n\t\tthis.toggleMemberList = this.toggleMemberList.bind(this);\n\t\t// bind this in windowToggleFps\n\t\tthis.windowToggleFps = this.windowToggleFps.bind(this);\n\t\twindow.windowToggleFps = this.windowToggleFps;\n\t}\n\n\t@action\n\tsetGatewayReady(value: boolean) {\n\t\tthis.isGatewayReady = value;\n\t}\n\n\t@action\n\tsetAppLoading(value: boolean) {\n\t\tthis.isAppLoading = value;\n\t}\n\n\t@action\n\tsetUser(user: APIUser) {\n\t\tthis.account = new AccountStore(user);\n\t}\n\n\t@computed\n\t/**\n\t * Whether the app is done loading and ready to be displayed\n\t */\n\tget isReady() {\n\t\treturn !this.isAppLoading && this.isGatewayReady;\n\t}\n\n\t@action\n\tsetActiveGuildId(id: Snowflake | undefined | \"@me\") {\n\t\tthis.activeGuildId = id;\n\n\t\t// try to resolve the guild\n\t\tthis.activeGuild = (id ? this.guilds.get(id) : null) ?? null;\n\t}\n\n\t@action\n\tsetActiveChannelId(id: string | undefined) {\n\t\tthis.activeChannelId = id;\n\n\t\t// try to resolve the channel\n\t\tthis.activeChannel = (id ? this.channels.get(id) : null) ?? null;\n\t}\n\n\t@action\n\ttoggleMemberList() {\n\t\tthis.memberListVisible = !this.memberListVisible;\n\t}\n\n\t@action\n\twindowToggleFps() {\n\t\tthis.setFpsShown(!this.fpsShown);\n\t}\n\n\t// stuff mainly for settings, really anything that uses local storage\n\n\t@action\n\tsetToken(token: string, save = false) {\n\t\tthis.token = token;\n\t\tthis.tokenLoaded = true;\n\t\tif (save) {\n\t\t\tsecureLocalStorage.setItem(\"token\", token);\n\t\t\tthis.logger.info(\"Token saved to storage\");\n\t\t}\n\t}\n\n\t@action\n\tloadToken() {\n\t\tconst token = secureLocalStorage.getItem(\"token\") as string | null;\n\n\t\tthis.tokenLoaded = true;\n\n\t\tif (token) {\n\t\t\tthis.logger.debug(\"Loaded token from storage.\");\n\t\t\tthis.setToken(token);\n\t\t} else {\n\t\t\tthis.logger.debug(\"No token found in storage.\");\n\t\t\tthis.setGatewayReady(true);\n\t\t}\n\t}\n\n\t@action\n\tlogout() {\n\t\tthis.token = null;\n\t\tthis.tokenLoaded = false;\n\t\tthis.isAppLoading = false;\n\t\tthis.isGatewayReady = true;\n\t\tsecureLocalStorage.clear();\n\t\tmodalController.closeAll();\n\t}\n\n\t@action\n\tsetFpsShown(value: boolean) {\n\t\tthis.fpsShown = value;\n\n\t\tsecureLocalStorage.setItem(\"fpsShown\", value);\n\t}\n\n\t@action\n\tloadFpsShown() {\n\t\tthis.fpsShown = (secureLocalStorage.getItem(\"fpsShown\") as boolean | null) ?? false;\n\t}\n\n\t@action\n\tsetUpdaterEnabled(value: boolean) {\n\t\tthis.updaterStore?.setEnabled(value);\n\n\t\tsecureLocalStorage.setItem(\"updaterEnabled\", value);\n\t}\n\n\t@action\n\tloadUpdaterEnabled() {\n\t\tthis.updaterStore?.setEnabled((secureLocalStorage.getItem(\"updaterEnabled\") as boolean | null) ?? true);\n\t}\n\n\t@action\n\tloadSettings() {\n\t\tthis.loadFpsShown();\n\t\tthis.loadToken();\n\t\tthis.loadUpdaterEnabled();\n\t}\n}\n\nexport const appStore = new AppStore();\n\nexport function useAppStore() {\n\treturn appStore;\n}\n"],"names":["AppStore","__publicField","Logger","ThemeStore","GatewayConnectionStore","GuildStore","RoleStore","ChannelStore","UserStore","PrivateChannelStore","REST","ExperimentsStore","PresenceStore","MessageQueue","makeAutoObservable","isTauri","UpdaterStore","value","user","AccountStore","id","token","save","secureLocalStorage","modalController","_a","__decorateClass","observable","action","computed","appStore","useAppStore"],"mappings":"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"}