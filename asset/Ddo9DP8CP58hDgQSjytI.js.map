{"version":3,"file":"Ddo9DP8CP58hDgQSjytI.js","sources":["../../src/stores/objects/Guild.ts"],"sourcesContent":["import type { Snowflake } from \"@spacebarchat/spacebar-api-types/globals\";\nimport {\n\tChannelType,\n\tRESTPutAPIGuildBanJSONBody,\n\tRESTPutAPIGuildBanResult,\n\tRoutes,\n\ttype APIChannel,\n\ttype APIGuild,\n\ttype GatewayGuild,\n\ttype GatewayGuildMemberListUpdateDispatchData,\n} from \"@spacebarchat/spacebar-api-types/v9\";\nimport { ObservableMap, ObservableSet, action, computed, makeObservable, observable } from \"mobx\";\nimport { compareChannels } from \"../../utils/Utils\";\nimport AppStore from \"../AppStore\";\nimport GuildMemberListStore from \"../GuildMemberListStore\";\nimport GuildMemberStore from \"../GuildMemberStore\";\n\nexport default class Guild {\n\tprivate readonly app: AppStore;\n\n\tid: Snowflake;\n\tjoinedAt: string;\n\t@observable threads: unknown[];\n\t@observable stickers: unknown[]; // TODO:\n\t@observable stageInstances: unknown[]; // TODO:\n\t@observable roles_: ObservableSet<Snowflake>;\n\t@observable memberCount: number;\n\t@observable lazy: boolean;\n\t@observable large: boolean;\n\t@observable guildScheduledEvents: unknown[]; // TODO:\n\t@observable emojis: unknown[]; // TODO:\n\t@observable channels_: ObservableSet<Snowflake>;\n\t@observable name: string;\n\t@observable description: string | null = null;\n\t@observable icon: string | null = null;\n\t@observable splash: string | null = null;\n\t@observable banner: string | null = null;\n\t@observable features: string[];\n\t@observable preferredLocale: string;\n\t@observable ownerId: Snowflake;\n\t@observable applicationId: Snowflake | null = null;\n\t@observable afkChannelId: Snowflake | null = null;\n\t@observable afkTimeout: number;\n\t@observable systemChannelId: Snowflake | null = null;\n\t@observable verificationLevel: number;\n\t@observable explicitContentFilter: number;\n\t@observable defaultMessageNotifications: number;\n\t@observable mfaLevel: number;\n\t@observable vanityUrlCode: string | null = null;\n\t@observable premiumTier: number;\n\t//   @observable premium_progress_bar_enabled: boolean\n\t@observable systemChannelFlags: number;\n\t@observable discoverySplash: string | null = null;\n\t@observable rulesChannelId: Snowflake | null = null;\n\t@observable publicUpdatesChannelId: Snowflake | null = null;\n\t@observable maxVideoChannelUsers: number;\n\t@observable maxMembers: number;\n\t@observable nsfwLevel: number;\n\t@observable hubType: number | null = null;\n\t@observable members: GuildMemberStore;\n\t@observable memberLists: ObservableMap<string, GuildMemberListStore> = new ObservableMap();\n\n\tconstructor(app: AppStore, data: GatewayGuild) {\n\t\tthis.app = app;\n\t\tthis.roles_ = new ObservableSet();\n\t\tthis.channels_ = new ObservableSet();\n\t\tthis.members = new GuildMemberStore(app, this);\n\n\t\tthis.id = data.id;\n\t\tthis.joinedAt = data.joined_at;\n\t\tthis.threads = data.threads;\n\t\tthis.stickers = data.stickers;\n\t\tthis.stageInstances = data.stage_instances;\n\t\tthis.memberCount = data.member_count;\n\t\tthis.lazy = data.lazy;\n\t\tthis.large = data.large;\n\t\tthis.guildScheduledEvents = data.guild_scheduled_events;\n\t\tthis.emojis = data.emojis;\n\t\tthis.name = data.properties.name;\n\t\tthis.description = data.properties.description;\n\t\tthis.icon = data.properties.icon;\n\t\tthis.splash = data.properties.splash;\n\t\tthis.banner = data.properties.banner;\n\t\tthis.features = data.properties.features;\n\t\tthis.preferredLocale = data.properties.preferred_locale;\n\t\tthis.ownerId = data.properties.owner_id;\n\t\tthis.applicationId = data.properties.application_id;\n\t\tthis.afkChannelId = data.properties.afk_channel_id;\n\t\tthis.afkTimeout = data.properties.afk_timeout;\n\t\tthis.systemChannelId = data.properties.system_channel_id;\n\t\tthis.verificationLevel = data.properties.verification_level;\n\t\tthis.explicitContentFilter = data.properties.explicit_content_filter;\n\t\tthis.defaultMessageNotifications = data.properties.default_message_notifications;\n\t\tthis.mfaLevel = data.properties.mfa_level;\n\t\tthis.vanityUrlCode = data.properties.vanity_url_code;\n\t\tthis.premiumTier = data.properties.premium_tier;\n\t\t// this.premium_progress_bar_enabled = data.properties.premium_progress_bar_enabled; // FIXME: missing\n\t\tthis.systemChannelFlags = data.properties.system_channel_flags;\n\t\tthis.discoverySplash = data.properties.discovery_splash;\n\t\tthis.rulesChannelId = data.properties.rules_channel_id;\n\t\tthis.publicUpdatesChannelId = data.properties.public_updates_channel_id;\n\t\tthis.maxVideoChannelUsers = data.properties.max_video_channel_users!;\n\t\tthis.maxMembers = data.properties.max_members!;\n\t\tthis.nsfwLevel = data.properties.nsfw_level;\n\t\tthis.hubType = data.properties.hub_type;\n\n\t\tapp.roles.addAll(data.roles);\n\t\tapp.channels.addAll(data.channels);\n\n\t\tdata.roles.forEach((role) => this.roles_.add(role.id));\n\t\tdata.channels?.forEach((channel) => this.channels_.add(channel.id));\n\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tupdate(data: APIGuild | GatewayGuild) {\n\t\tif (\"properties\" in data) {\n\t\t\tObject.assign(this, { ...data, ...data.properties });\n\t\t\treturn;\n\t\t}\n\n\t\tObject.assign(this, data);\n\t}\n\n\t@action\n\tupdateMemberList(data: GatewayGuildMemberListUpdateDispatchData) {\n\t\tconst store = this.memberLists.get(data.id);\n\t\tif (store) {\n\t\t\tstore.update(data);\n\t\t} else {\n\t\t\tthis.memberLists.set(data.id, new GuildMemberListStore(this.app, this, data));\n\t\t}\n\t}\n\n\tgetMemberList(id: string): GuildMemberListStore | undefined {\n\t\treturn this.memberLists.get(id);\n\t}\n\n\t@computed\n\tget acronym() {\n\t\treturn this.name\n\t\t\t.split(\" \")\n\t\t\t.map((word) => word.substring(0, 1))\n\t\t\t.join(\"\");\n\t}\n\n\t@computed\n\tget channels() {\n\t\tlet guildChannels = this.app.channels.all.filter((channel) => this.channels_.has(channel.id));\n\t\tguildChannels = guildChannels.filter((channel) => {\n\t\t\tif (channel.type === ChannelType.GuildCategory) {\n\t\t\t\t// check if any children are visible\n\t\t\t\treturn guildChannels.some(\n\t\t\t\t\t(child) => child.parentId === channel.id && child.hasPermission(\"VIEW_CHANNEL\"),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn channel.hasPermission(\"VIEW_CHANNEL\");\n\t\t});\n\t\tconst topLevelChannels = guildChannels.filter((channel) => !channel.parentId);\n\t\tconst sortedChannels = topLevelChannels\n\t\t\t.sort(compareChannels)\n\t\t\t.flatMap((topLevelChannel) => [\n\t\t\t\ttopLevelChannel,\n\t\t\t\t...guildChannels.filter((channel) => channel.parentId === topLevelChannel.id).sort(compareChannels),\n\t\t\t]);\n\t\treturn sortedChannels;\n\t}\n\n\t@computed\n\tget roles() {\n\t\treturn this.app.roles.all.filter((role) => this.roles_.has(role.id));\n\t}\n\n\t@action\n\taddChannel(data: APIChannel) {\n\t\tthis.app.channels.add(data);\n\t\tthis.channels_.add(data.id);\n\t}\n\n\t@action\n\tupdateChannel(data: APIChannel) {\n\t\tthis.app.channels.update(data);\n\t}\n\n\t@action\n\tremoveChannel(id: Snowflake) {\n\t\tthis.app.channels.remove(id);\n\t\tthis.channels_.delete(id);\n\t}\n\n\t@action\n\tasync kickMember(id: Snowflake, reason?: string) {\n\t\treturn this.app.rest.delete(\n\t\t\tRoutes.guildMember(this.id, id),\n\t\t\t{},\n\t\t\treason\n\t\t\t\t? {\n\t\t\t\t\t\t\"X-Audit-Log-Reason\": reason,\n\t\t\t\t  }\n\t\t\t\t: {},\n\t\t);\n\t}\n\n\t@action\n\tasync banMember(id: Snowflake, reason?: string, deleteMessageSeconds?: number) {\n\t\treturn this.app.rest.put<RESTPutAPIGuildBanJSONBody, RESTPutAPIGuildBanResult>(\n\t\t\tRoutes.guildBan(this.id, id),\n\t\t\t{\n\t\t\t\tdelete_message_seconds: deleteMessageSeconds,\n\t\t\t},\n\t\t\t{},\n\t\t\treason\n\t\t\t\t? {\n\t\t\t\t\t\t\"X-Audit-Log-Reason\": reason,\n\t\t\t\t  }\n\t\t\t\t: {},\n\t\t);\n\t}\n}\n"],"names":["Guild","app","data","__publicField","ObservableMap","ObservableSet","GuildMemberStore","role","_a","channel","makeObservable","store","GuildMemberListStore","id","word","guildChannels","ChannelType","child","compareChannels","topLevelChannel","reason","Routes","deleteMessageSeconds","__decorateClass","observable","action","computed"],"mappings":"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"}